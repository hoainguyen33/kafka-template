import (
    "time"
    "crypto/tls"
    grpcrecovery "github.com/grpc-ecosystem/go-grpc-middleware/recovery"
	grpc_ctxtags "github.com/grpc-ecosystem/go-grpc-middleware/tags"
	grpc_opentracing "github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing"
	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
    "google.golang.org/grpc"
    "google.golang.org/grpc/keepalive"
    "github.com/go-playground/validator/v10"
    "kafka-test/internal/delivery/grpc/account"
    accountsService "kafka-test/proto/account"
)

const (
	certFile        = "ssl/server-cert.pem"
	keyFile         = "ssl/server-key.pem"
	maxHeaderBytes  = 1 << 20
	gzipLevel       = 5
	stackSize       = 1 << 10 // 1 KB
	csrfTokenHeader = "X-CSRF-Token"
	bodyLimit       = "2M"
)


func (s *server) Run() error
    // server cert
	serverCert, err := tls.LoadX509KeyPair(certFile, keyFile)
	if err != nil {
		s.log.Fatalf("failed to load key pair: %s", err)
	}

	// Create the credentials and return it
	config := &tls.Config{
		Certificates: []tls.Certificate{serverCert},
		ClientAuth:   tls.NoClientCert,
	}

	grpcServer := grpc.NewServer(
		grpc.Creds(credentials.NewTLS(config)),
		grpc.KeepaliveParams(keepalive.ServerParameters{
			MaxConnectionIdle: s.cfg.Server.MaxConnectionIdle * time.Minute, // time.Duration
			Timeout:           s.cfg.Server.Timeout * time.Second,  // time.Duration
			MaxConnectionAge:  s.cfg.Server.MaxConnectionAge * time.Minute,  // time.Duration
			Time:              s.cfg.Server.Timeout * time.Minute,  // time.Duration
		}),
		grpc.ChainUnaryInterceptor(
			grpc_ctxtags.UnaryServerInterceptor(),
			grpc_opentracing.UnaryServerInterceptor(),
			grpc_prometheus.UnaryServerInterceptor,
			grpcrecovery.UnaryServerInterceptor(),
			im.Logger,
		),
	)

	accountService := account.NewAccountService(s.log, validate)
	accountsService.RegisterAccountsServiceServer(grpcServer, accountService)
	grpc_prometheus.Register(grpcServer)
}